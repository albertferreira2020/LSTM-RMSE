#!/usr/bin/env python3
# test_tensorflow_fix.py - Testa se o fix do TensorFlow est√° funcionando

import os
import sys

def test_tensorflow_import():
    """Testa importa√ß√£o do TensorFlow com as configura√ß√µes de fix"""
    print("=== TESTE DE IMPORTA√á√ÉO DO TENSORFLOW ===")
    
    try:
        # Aplicar configura√ß√µes espec√≠ficas para macOS antes de importar
        print("Aplicando configura√ß√µes de ambiente para macOS...")
        
        # Suprimir avisos do urllib3/OpenSSL
        import warnings
        warnings.filterwarnings('ignore', category=UserWarning, module='urllib3')
        warnings.filterwarnings('ignore', message='.*urllib3.*OpenSSL.*')
        warnings.filterwarnings('ignore', message='.*LibreSSL.*')
        
        # Configura√ß√µes cr√≠ticas para macOS - RESOLVER MUTEX LOCK
        os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
        os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'
        os.environ['TF_DISABLE_MKL'] = '1'
        
        # Threading - CR√çTICO para mutex lock failed
        os.environ['OMP_NUM_THREADS'] = '1'
        os.environ['TF_NUM_INTEROP_THREADS'] = '1'
        os.environ['TF_NUM_INTRAOP_THREADS'] = '1'
        os.environ['OPENBLAS_NUM_THREADS'] = '1'
        os.environ['MKL_NUM_THREADS'] = '1'
        os.environ['VECLIB_MAXIMUM_THREADS'] = '1'
        os.environ['NUMEXPR_NUM_THREADS'] = '1'
        
        # Configura√ß√µes macOS espec√≠ficas
        os.environ['OBJC_DISABLE_INITIALIZE_FORK_SAFETY'] = 'YES'
        os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'
        os.environ['CUDA_VISIBLE_DEVICES'] = ''  # For√ßa uso de CPU se houver problemas
        
        print("Tentando importar TensorFlow...")
        import tensorflow as tf
        
        print("Configurando threading...")
        tf.config.threading.set_inter_op_parallelism_threads(1)
        tf.config.threading.set_intra_op_parallelism_threads(1)
        
        # Verificar GPUs
        gpus = tf.config.list_physical_devices('GPU')
        if gpus:
            print(f"GPUs encontradas: {len(gpus)}")
            for gpu in gpus:
                try:
                    tf.config.experimental.set_memory_growth(gpu, True)
                    print(f"GPU configurada: {gpu}")
                except RuntimeError as e:
                    print(f"Erro ao configurar GPU: {e}")
        else:
            print("Nenhuma GPU encontrada, usando CPU")
        
        print("Testando importa√ß√µes do Keras...")
        from tensorflow.keras.models import Sequential
        from tensorflow.keras.layers import LSTM, Dense, Dropout
        from tensorflow.keras.optimizers import Adam
        
        print("Testando cria√ß√£o de modelo simples...")
        model = Sequential()
        model.add(Dense(10, input_shape=(5,), activation='relu'))
        model.add(Dense(1))
        model.compile(optimizer=Adam(learning_rate=0.001), loss='mse')
        
        print("‚úÖ TensorFlow est√° funcionando corretamente!")
        print(f"Vers√£o do TensorFlow: {tf.__version__}")
        print(f"Dispositivos dispon√≠veis: {tf.config.list_physical_devices()}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå TensorFlow n√£o est√° instalado: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao configurar TensorFlow: {e}")
        return False

def test_simple_computation():
    """Testa uma computa√ß√£o simples com TensorFlow"""
    try:
        import tensorflow as tf
        
        print("\n=== TESTE DE COMPUTA√á√ÉO SIMPLES ===")
        
        # Teste de opera√ß√£o b√°sica
        a = tf.constant([1, 2, 3, 4])
        b = tf.constant([5, 6, 7, 8])
        result = tf.add(a, b)
        
        print(f"Teste de adi√ß√£o: {a.numpy()} + {b.numpy()} = {result.numpy()}")
        
        # Teste com matriz
        matrix_a = tf.constant([[1, 2], [3, 4]], dtype=tf.float32)
        matrix_b = tf.constant([[5, 6], [7, 8]], dtype=tf.float32)
        matrix_result = tf.matmul(matrix_a, matrix_b)
        
        print(f"Teste de multiplica√ß√£o de matrizes:")
        print(f"A:\n{matrix_a.numpy()}")
        print(f"B:\n{matrix_b.numpy()}")
        print(f"A @ B:\n{matrix_result.numpy()}")
        
        print("‚úÖ Computa√ß√µes b√°sicas funcionando!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro em computa√ß√µes b√°sicas: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("TESTE DE CONFIGURA√á√ÉO DO TENSORFLOW\n")
    
    # Teste 1: Importa√ß√£o
    import_ok = test_tensorflow_import()
    
    if import_ok:
        # Teste 2: Computa√ß√£o
        computation_ok = test_simple_computation()
        
        if computation_ok:
            print("\nüéâ TODOS OS TESTES PASSARAM!")
            print("Voc√™ pode usar o main_advanced.py com confian√ßa.")
        else:
            print("\n‚ö†Ô∏è Importa√ß√£o OK, mas computa√ß√£o falhou.")
            print("Recomendo usar o main_safe.py (sem TensorFlow).")
    else:
        print("\n‚ö†Ô∏è TensorFlow n√£o dispon√≠vel.")
        print("Use o main_safe.py para an√°lises sem TensorFlow.")
    
    print("\nArquivos dispon√≠veis:")
    print("- main_advanced.py: Vers√£o completa com LSTM (com fix para macOS)")
    print("- main_safe.py: Vers√£o segura apenas com RandomForest e GradientBoosting")
    print("- python3 test_tensorflow_fix.py: Este teste")

if __name__ == "__main__":
    main()
